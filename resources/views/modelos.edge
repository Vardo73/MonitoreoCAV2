@layout('master')

@section('modelos')

<div class="container">
    <hr/>
    <div class="row mx-auto justify-content-around">
        <div class="col col-9 align-self-center">
            <h2 style="text-align: center;"><span style="color: #2aa5d6;">Modelos</span></h2>
        </div>
        <div class="col col-3 align-self-end">
            <div class="d-grid gap-2 mx-auto ">
                <button class="btn btn-primary" id="modalNuevoModelo" data-bs-toggle="modal" data-bs-target="#ModeloModal">Agregar</button>
            </div>
        </div>  
    </div>

    <hr/>
</div>

<br>
<div class="container">

    @each(modelo in modelos)
    <div class="card">
        <h5 class="card-header">{{ modelo.name }}</h5>
        <div class="card-body">
          <p class="card-text">{{ modelo.description }}</p>
          
          <h4 for="">Contaminantes que monitorea:</h4>
          <div class="inline">
            @each(rel in relacion)
            @if(rel.modelo_id==modelo.id)
            
            <span class="badge rounded-pill bg-warning text-dark">{{ rel.name }}</span>
                
            @endif
                
            @endeach
          </div>
          <br>
          <div class="row mx-auto">
              <div class="col col-6 d-grid gap-2 mx-auto">
                <button  class="btn btn-info" id="btnEdit" onclick="MuestraEdit({{ modelo.id }})" data-bs-toggle="modal" data-bs-target="#ModeloModalEdit">Editar</button>
              </div>
              <div class="col col-6 d-grid gap-2 mx-auto">
                <button  class="btn btn-danger" onclick='EliminarModelo({{ modelo.id }})'>Eliminar</button>
              </div>
          </div>
        </div>
    </div>
    <br>
    @endeach

    <div class="container-fluid">
        <div class="modal fade" id="ModeloModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Agregar Modelo</h2>
                    </div>
                    <div class="modal-body">
                        <div>
                            <label class="form-label" for="NomModelo">Nombre:</label>
                            <input class="form-control" type="text" name="NomModelo" id="NomModelo" required min="1" max="25">
                        </div>
                        <div>
                            <label  class="form-label" for="txtDesModelo">Descripción:</label>
                            <textarea class="form-control" name="txtDesModelo" id="txtDesModelo" style="height: 100px" max="50"></textarea>
                        </div>        
                        <label  class="form-label" >¿Qué contaminantes monitorea?:</label><br>
                        @each(contaminante in contaminantes)
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" name='check' type="checkbox"  value={{ contaminante.id }}>
                                <label class="form-check-label" for="inlineCheckbox1">{{ contaminante.name }}</label>
                            </div>
                        @endeach            
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-outline-primary" value="Crear" id="btnCrearModelo" name="btnCrearModelo" data-bs-dismiss="modal">
                        <button class="btn btn-outline-primary" id="btnCancelarModelo" name="btnCancelarModelo" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    
    <div class="container-fluid">
        <div class="modal fade" id="ModeloModalEdit" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Editar Modelo</h2>
                    </div>
                    <div class="modal-body">
                        <div>
                            <label class="form-label" for="NomModeloEdit">Nombre:</label>
                            <input class="form-control" type="text" name="NomModeloEdit" id="NomModeloEdit" required min="1" max="25">
                        </div>
                        <div>
                            <label  class="form-label" for="txtDesModeloEdit">Descripción:</label>
                            <textarea class="form-control" name="txtDesModeloEdit" id="txtDesModeloEdit" style="height: 100px" max="50"></textarea>
                        </div>        
                        <label  class="form-label" >¿Qué contaminantes monitorea?:</label><br>
                        @each(contaminante in contaminantes)
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" name='checkEdit' type="checkbox" value={{ contaminante.id }}>
                                <label class="form-check-label" for="inlineCheckbox1">{{ contaminante.name }}</label>
                            </div>
                        @endeach            
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="btn btn-outline-primary" value="Editar" id="btnEditarModelo" name="btnCrearModelo" data-bs-dismiss="modal">
                        <button class="btn btn-outline-primary" id="btnCancelarEditModelo" name="btnCancelarModelo" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@entryPointScripts('modelos')
<script>
    const ruta=yourGlobalVariable+'/modelo';
    let idEdit=0;
    
    function NoVacio(elementos){
        var falta=0;
        elementos.forEach(element => {
            if(element=="" || element==0){
                falta++;
            }
        });

        if(falta>0){
            Swal.fire({
                text:"Faltan campos por llenar.",
                icon: "warning",
                timer:1000,
                timerProgressBar: true
            })
            return false;
        }
        return true;
    }

    function EliminarModelo(id){
        Swal.fire({
            title: 'Está seguro de eliminar este modelo?',
            showCancelButton: true,
            confirmButtonText: `Eliminar`,
            denyButtonText: `Cancelar`,
        }).then((result)=>{
            if (result.isConfirmed){
                axios({
                    method: 'post',
                    url: ruta+'/delete/',
                    data: {
                        id:id
                    }
                })
                .then(function (response) {
                    if(response.data[0]==true){
                    Swal.fire({
                        text:response.data[1],
                        icon: "success",
                        timer:1000,
                        timerProgressBar: true
                    }).then((result)=>{
                        location.reload();
                    });
                    }
                    if(response.data[0]==false){
                    Swal.fire({
                        text:response.data[1].messages.errors[0].message,
                        icon: "error",
                        timer:5000,
                        timerProgressBar: true
                    }).then((result)=>{
                        location.reload();
                    });
                    }
                })
                .catch(function (error) {
                    return [false, error]
                });
            }
        })
    }
    function MuestraEdit(id){
        idEdit=id;
        let NomModeloEdit=document.getElementById('NomModeloEdit');
        let txtDesModeloEdit =document.getElementById('txtDesModeloEdit')
        let checks=document.getElementsByName('checkEdit');
        axios({
            method: 'post',
            url: ruta+'/consulta/',
            data: {
                id:id
            }
        })
        .then(function (response) {
            NomModeloEdit.value=response.data[0].name
            txtDesModeloEdit.value=response.data[0].description

            checks.forEach(element => {
                response.data[1].forEach(element2 => {
                    if(element.value==element2.contaminante_id){
                        element.checked = true
                    }
                });
            });
        })
        .catch(function (error) {
            return [false, error]
        });

    }

    function EditarModelo(){
 
        let NomModeloEdit=document.getElementById('NomModeloEdit').value.trim();
        let txtDesModeloEdit =document.getElementById('txtDesModeloEdit').value.trim();
        let checks=document.getElementsByName('checkEdit');
        let idCont=[]
        let i=0;
        checks.forEach(element => {
            if(element.checked){
                idCont.push(element.value)
                i++;
            }
        });
        if(i<1){
            Swal.fire({
                text:"Debe seleccionar al menos un contaminante.",
                icon: "warning",
                timer:1000,
                timerProgressBar: true
            })
            return false;
        }

        const ele=[
            NomModeloEdit,
            txtDesModeloEdit
        ]

        if(NoVacio(ele)){
            axios({
                method: 'post',
                url: ruta+'/edit/',
                data: {
                    id:idEdit,
                    name:NomModeloEdit,
                    description:txtDesModeloEdit,
                    contaminantes:idCont
                }
            })
            .then(function (response) {
            if(response.data[0]==true){
                Swal.fire({
                    text:response.data[1],
                    icon: "success",
                    timer:1000,
                    timerProgressBar: true
                }).then((result)=>{
                    location.reload();
                });
            }
            if(response.data[0]==false){
                Swal.fire({
                    text:response.data[1].messages.errors[0].message,
                    icon: "error",
                    timer:5000,
                    timerProgressBar: true
                }).then((result)=>{
                    location.reload();
                });
            }
            })
            .catch(function (error) {
                console.log(error);
                Swal.fire({
                    text:error,
                    icon: "error",
                    timer:5000,
                    timerProgressBar: true
                }).then((result)=>{
                    //location.reload();
                });
            });
        }
    }
</script>

@end